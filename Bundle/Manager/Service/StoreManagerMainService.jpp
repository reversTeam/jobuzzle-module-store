/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:12:49
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-10-03 22:56:35
**************************************************************/

class StoreManagerMainService extends MasterService {

	static n = 0;

	_sock = undefined;
	_collection = undefined;
	public _callback = {};
	_me = undefined;
	_userInit = false;
	_events = {};

	#default get for _collection;
	#default get, set for _sock;

	initialize : function () {
		_super();
		var serviceManager = serviceLocator.get("ServiceManager");
		var client_sock = serviceManager.get("client_websocket_main_service");

		this.setSock(client_sock);
		this._sock.on('request', this, this.onRequest);
	}

	public onListen : function () {
		var dispatcher = _super();

		return dispatcher;		
	}

	onRequest : function (datas) {
		var dispatcher = serviceLocator.get('Dispatcher');

		if (datas['error'] != undefined) {
			console.log(datas);
			if (datas['requestid'] && this['_callback'][datas['requestid']]) {
				this['_callback'][datas['requestid']](datas);
				delete this['_callback'][datas['requestid']];
			}
			return ;
		}
		if (datas['result'].length) {
			if (datas['event'] == undefined || datas['event'] != 'remove') {
				this.onCreate(datas['result']);
			}
			else
				this.removeAll(datas['result']);
		}
		
		if (datas['requestid'] && this['_callback'][datas['requestid']]) {
			this['_callback'][datas['requestid']](datas);
			delete this['_callback'][datas['requestid']];
		} else if (!datas['result'].length) {
			dispatcher.trigger('Error:url:404');
		}
	}

	sendEventCreate : function (type) {
		var dispatcher = serviceLocator.get('Dispatcher');

		if (this._events[type])
			clearTimeout(this._events[type]);
		this._events[type] = setTimeout(function() {
			dispatcher.trigger('Store:'+ type +':create');
		}, 100);
	}

	onCreate : function (result) {
		var events = [];
		var tmp = [];

		for (var i in result) {
			tmp = this.addInCollection(result[i]);
			for (var i in tmp) {
				if (events.indexOf(tmp[i]) == -1)
					events.push(tmp[i]);
			}
		}
		for (var i in events) {
			this.sendEventCreate(events[i]);
		}
	}

	initCollection : function (collection) {
		var collectionManager = serviceLocator.get('CollectionManager');
		this._collection = collectionManager.get(collection['name']);

		this._collection.addChilds(collection['childs']);
	}

	request : function (url, datas, callback) {
		var n = ++StoreManagerMainService.n;
		if (!datas)
			datas = {};
		if (typeof callback == 'function')
			this._callback[n] = callback;
		this._sock.send('route', {
			'route' : url,
			'requestid' : n,
			'params' : datas
		});
	}

	public get : function (id) {
		return this._collection.get(id);
	}

	public isMe : function (id) {
		this._me = id;
	}

	public getMe : function () {
		return this.get(this._me);
	}

	public getAll : function (type) {
		return this._collection.getAll(type);
	}

	public update : function (id, datas) {
		var dispatcher = serviceLocator.get('Dispatcher');

		this._collection.update(id, datas);
	}

	public removeAll : function (elements) {
		for (var i in elements) {
			this.remove(elements[i]['id']);
		}
	}

	public remove : function (id) {
		this._collection.remove(id);
	}

	addInCollection : function (datas) {
		var dispatcher = serviceLocator.get('Dispatcher');
		var collection = this.getAll(datas['type']);
		if (!collection)
			return ;
		var events = collection.create(datas);

		if (!this._userInit && datas.id == this._me) {
			this._userInit = true;
			serviceLocator.get('ServiceManager')
				.get('user_manager_main_service')
			.init(this.get(datas.id));
			serviceLocator.get('Dispatcher').trigger('Store:Me:update');
		} else if (datas.id == this._me) {
			serviceLocator.get('Dispatcher').trigger('Store:Me:update');
		}
		return events;
	}

}